pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Bharath-TG/goldenimage.git'
        GITHUB_CREDENTIALS_ID = 'github-token'
        BRANCH_NAME = 'main'
        PACKER_VERSION = '1.11.2'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository without any credentials, as it's public
                    echo "Cloning the public GitHub repository..."
                    git credentialsId: "${GITHUB_CREDENTIALS_ID}", url: "${GIT_REPO}", branch: "${BRANCH_NAME}"
                }
            }
        }
        
        stage('Install Packer') {
            steps {
                script {
                    echo "Checking if Packer is installed..."

                    // Check if Packer is already installed
                    def packerInstalled = sh(script: 'command -v packer', returnStatus: true)
                    
                    if (packerInstalled != 0) {
                        echo "Packer not found, installing packer..."

                        // Download and install Packer
                        sh """
                        curl -LO https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
                        unzip packer_${PACKER_VERSION}_linux_amd64.zip
                        sudo mv packer /usr/local/bin/
                        """
                        
                        // Verify the installation of Packer
                        sh 'packer --version'
                    } else {
                        sh 'packer --version'
                        echo "Packer is already installed."
                    }
                }
            }
        }

        stage('Install Ansible') {
            steps {
                script {
                    echo "Checking if Ansible is installed..."

                    // Check if Ansible is already installed
                    def ansibleInstalled = sh(script: 'command -v ansible', returnStatus: true)
                    
                    if (ansibleInstalled != 0) {
                        echo "Ansible not found, installing ansible..."

                        // Install Ansible on Rocky Linux 9
                        sh """
                        sudo dnf install -y epel-release
                        sudo dnf install -y ansible
                        """
                        
                        // Verify the installation of Ansible
                        sh 'ansible --version'
                    } else {
                        sh 'ansible --version'
                        echo "Ansible is already installed."
                    }
                }
            }
        }
        
        stage('Validate Packer HCL File') {
            steps {
                script {
                    echo "Validating Packer HCL file..."

                    // Change to the ansible directory
                    dir('ansible') {
                        // Validate the Packer HCL file
                        sh 'ls -l'
                        sh 'packer init .'
                        sh 'packer validate ansible_packer.pkr.hcl'
                    }
                }
            }
        }
        stage('Build Packer HCL File') {
            steps {
                script {
                    echo "Build Packer HCL file..."

                    // Change to the ansible directory
                    dir('ansible') {
                        // Validate the Packer HCL file
                        sh 'ls -l'
                        sh 'packer build ansible_packer.pkr.hcl | tee packer_output.log'
                    }
                }
            }
        }
        
    }
    post {
        success {
            script {
                
                def output = sh(script: 'tail -n 1 ansible/packer_output.log | awk -F": " \'{print $2, $3}\'', returnStdout: true).trim()
                def (region, amiId) = output.split()

                echo "Build successful!"
                echo "Region: ${region}, AMI: ${amiId}"

                // Sending success message to Slack (if configured)
                slackSend(channel: SLACK_CHANNEL, color: 'good', message: "Packer build successful! Region: ${region}, AMI: ${amiId}")
            }
        }
        failure {
            script {
                // In case of failure, send the failure message to Slack
                slackSend(channel: SLACK_CHANNEL, color: 'danger', message: "Packer build failed!")
            }
        }
    }
}
