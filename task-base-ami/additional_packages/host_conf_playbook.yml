---
- name: update configuration files
  hosts: localhost
  gather_facts: no
  become: true

  tasks:
    - name: updating configuration selinux config
      copy:
        dest: "/etc/selinux/config"
        content: |
          SELINUX=permissive
          SELINUX=disabled

    - name: adding bastion proxy 
      shell: |
        echo 'proxy=http://172.31.21.180:3128/' >> /etc/yum.conf

    - name: adding proxy 
      shell: |
        echo '172.31.21.180 bastion.twidpay.com' >> /etc/hosts
          
    - name: partition mount script
      copy:
        dest: "/tmp/mount.sh"
        content: |
          #!/bin/bash

          # Get the root disk (e.g., /dev/nvme0n1 or /dev/nvme1n1)
          root_disk=$(df / | tail -1 | awk '{print $1}')
          
          echo "Root disk: $root_disk"
          
          # Define the disks we want to check (we will match the base disk name)
          disk_to_format=""
          
          # Check if the root disk is on /dev/nvme0n1* or /dev/nvme1n1*
          if [[ $root_disk == /dev/nvme0n1* ]]; then
              # If root is on /dev/nvme0n1*, we will format /dev/nvme1n1
              disk_to_format="/dev/nvme1n1"
          elif [[ $root_disk == /dev/nvme1n1* ]]; then
              # If root is on /dev/nvme1n1*, we will format /dev/nvme0n1
              disk_to_format="/dev/nvme0n1"
          else
              echo "Root disk is neither on /dev/nvme0n1* nor /dev/nvme1n1* - exiting."
              exit 1
          fi
          
          echo "Disk to format: $disk_to_format"

          echo "Formatting disk: $disk_to_format"
          sudo mkfs.xfs $disk_to_format
          sudo mkdir -p /twid
          sudo mount $disk_to_format /twid
          uuid=$(sudo blkid -o value -s UUID $disk_to_format)
          echo "UUID=$uuid  /twid  xfs  defaults,nofail 0 2" | sudo tee -a /etc/fstab 
    
    - name: update /etc/fstab
      shell: |
        sudo chmod +x /tmp/mount.sh
        sudo bash /tmp/mount.sh
        sudo rm -f /tmp/mount.sh
        
    - name: Create swap
      shell: |
        dd if=/dev/zero of=/swapfile1 bs=1M count=512 && \
        chmod 600 /swapfile1 && \
        mkswap /swapfile1 && \
        swapon /swapfile1 && \
        echo '/swapfile1 swap swap defaults 0 0' | sudo tee -a /etc/fstab
        sudo mkdir /data
        echo 'fs-0d128686506baa805:/ /data efs defaults,_netdev 0 0' | sudo tee -a /etc/fstab

    # - name: Adding preTerminate script
    #   copy:
    #     dest: "/root/preTerminate.sh"
    #     content: |
    #       #!/bin/bash
    #       set -e
    #       export asg_name="PLACEHOLDERASG"
    #       export instanceId="PLACEHOLDERINSTANCE"
    #       export HTTPS_PROXY="http://172.31.21.180:3128/"
    #       while true
    #       do
    #       	currentState=`curl http://169.254.169.254/latest/meta-data/autoscaling/target-lifecycle-state`
    #       	echo $currentState
    #       	if [ "$currentState" = "Terminated" ]
    #       	then
    #       		/bin/systemctl stop serf
    #       		echo "Entering sleep for 600sec for target deregistration"
    #       		sleep 600
    #       		/bin/bash /root/final_backup.sh
    #       		if [[ $? -eq 0 ]]
    #       		then
    #       			/usr/sbin/logwatch --output mail --hostname api --range today || true
    #       			/usr/bin/aws autoscaling complete-lifecycle-action --lifecycle-hook-name preterminate --auto-scaling-group-name "$asg_name" --lifecycle-action-result CONTINUE  --region ap-south-1 --instance-id "$instanceId"
    #       			sleep 100
    #       			systemctl stop nginx
    #       			systemctl stop php-fpm
          
    #       		fi
    #       	fi
    #       	sleep 10
    #       done
          
    # - name: Adding preTerminate script
    #   copy:
    #     dest: "/etc/systemd/system/preterminate.service"
    #     content: |
    #       [Unit]
    #       Description=Lifecycle hook respond script
    #       After=network.target
    #       After=network-online.target
    #       Wants=network-online.target
          
    #       [Service]
    #       ExecStart=/bin/bash /root/preTerminate.sh
    #       Restart=always
    #       RestartSec=10
    #       [Install]
    #       WantedBy=multi-user.target
          
    # - name: Adding final_backup script
    #   copy:
    #     dest: "/root/final_backup.sh"
    #     content: |
    #       #!/bin/bash
    #       set -e
    #       zip -r /data/logs/PLACEHOLDER/api/final_api.zip /twid/api/storage/logs
    #       if [[ $? -eq 0 ]]
    #       then
    #               echo "Zipped tasks logs succesfully"
    #       else
    #               exit 1
    #       fi
          
    #       [root@ip-172-31-25-134 /]# cat /root/final_backup.sh 
    #       #!/bin/bash
    #       set -e
    #       zip -r /data/logs/PLACEHOLDER/api/final_api.zip /twid/api/storage/logs
    #       if [[ $? -eq 0 ]]
    #       then
    #               echo "Zipped tasks logs succesfully"
    #       else
    #               exit 1
    #       fi

    # - name: Adding final_backup script
    #   copy:
    #     dest: "/root/final_backup.sh"
    #     content: |
    #       #!/bin/bash
    #       set -e
    #       zip -r /data/logs/PLACEHOLDER/api/final_api.zip /twid/api/storage/logs
    #       if [[ $? -eq 0 ]]
    #       then
    #               echo "Zipped tasks logs succesfully"
    #       else
    #               exit 1
    #       fi
